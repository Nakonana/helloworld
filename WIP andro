when did the bug occur...? Before mid May 2020
? https://github.com/HabitRPG/habitica-android/commit/70b3efb768b31fd6546f6cef1bb5c5b0ac1c2217#diff-40fe7722cd0ac2b4768bd7b343e63d725906ade0c517cb4a30962123c7235004
   -> inn-description etc. were added
   -> added <?xml version="1.0" encoding="utf-8"?><resources></resources> 
   -> changed '1.0' to "1.0" (is allowed)
   -> UTF-8 to "utf-8"
? https://github.com/HabitRPG/habitica-android/commit/2d077b9e72aa418610122016f512c0f430779c6f#diff-40fe7722cd0ac2b4768bd7b343e63d725906ade0c517cb4a30962123c7235004
   -> added leading spaces
? https://github.com/HabitRPG/habitica-android/commit/216b057fc46f99a92a7e56d58180eea3beb59400#diff-40fe7722cd0ac2b4768bd7b343e63d725906ade0c517cb4a30962123c7235004
? https://github.com/HabitRPG/habitica-android/commit/fd9240b44ee13d1fc85d017107b88d4e41acdfb5#diff-40fe7722cd0ac2b4768bd7b343e63d725906ade0c517cb4a30962123c7235004


line characters overview: https://stackoverflow.com/a/3451176

no new line at end of file = issue? https://stackoverflow.com/a/5813359 : Note that it is a good style to always put the newline as a last character if it is allowed by the file format. Furthermore, for example, for C and C++ header files it is required by the language standard. It's not just bad style, it can lead to unexpected behavior when using other tools on the file. if you wanted to combine files it may not behave the way you'd expect: it merges lines instead of stacking them. Warning about no end-of-line could be a warning when a portion of a file has been truncated. It could be a symptom of missing data. Source files are often concatenated by tools (C, C++: header files, Javascript: bundlers). If you omit the newline character, you could introduce nasty bugs (where the last line of one source is concatenated with the first line of the next source file). Hopefully all the source code concat tools out there insert a newline between concatenated files anyway but that doesn't always seem to be the case. The crux of the issue is - in most languages, newlines have semantic meaning and end-of-file is not a language defined alternative for the newline character. So you ought to terminate every statement/expression with a newline character -- including the last one.

strg+f: ^[^\s]+[ \s]$

 inn_description
 welcome_text
 reset_account_description 
 class_equipment_shop_dialog
 profile_gift_subscription
 profile_gift_gems
 profile_send_message
 task_setup_description
 --> are oddly formated/have white spaces issues in some languages but have been adjusted in the meantime
 
 </resources> often followed by white space
 
 subscribe_listitem1_description
 hourglasses_description
 gems_description
 stat_description
 gold_description
 experience_description
 mana_description
 health_description
 --> have white space issues in several languages
 
 ---> add new lines everywhere

res\values\styles.xml line 419
    values-be\                   - not available - missing new lines
    values-bg\store.xml missing  - available hardly working no missing lines (missing translations?)
    values-ca\store.xml missing  - not available - missing new lines
             \strings.xml line 57 white space
    values-cs\store.xml missing  - not available - missing new lines
    values-da\store.xml missing  - not available - missing new lines
    values-de\store.xml missing  - available with one missing new lines
             \strings.xml whitespace within Verfügbar bis  zum %s?
    values-el\store.xml missing  - not available - missing new lines - Greek
    values-en-rGB\store.xml missing   - available with one missing new lines
                 \strings.tutorial.xml line 15 & 18 indented on purpose?
                 CONFLICT (content): Merge conflict in Habitica/res/values-en-rGB/strings.xml Weblate Output
    values-es\store.xml missing  - available but hardly working with 2 missing new lines
    values-fi\store.xml missing  - not available - 3 missing new lines - Finnish
    values-fr\store.xml missing  - available hardly working 3 missing new lines
    values-he\store.xml missing and all others except strings.profile.xml - language?  
    values-hi\store.xml missing   - not available - missing new lines - Hindi
    values-hr-rHR\store.xml missing   - available not working all new lines available (not translated?)
                 \string.sidebar.xml line 16 leading space
                 \strings.xml line 229 Prodaj(%d Zlatnika) with trailing space
    values-hu\store.xml missing + no strings in profile   - not available - missing 3 new lines
    values-id\store.xml missing and all except profile   - language?
    values-in\store.xml missing and profile   - available - hardly working 1 missing new lines - indonesian?
    values-it\store.xml missing   - available hardly working 1 missing new lines
    values-iw\store.xml missing and profile - available hardly working no missing new lines - Hebrew
    values-ja\store.xml missing - available hardly working one missing new lines
    values-ko\store.xml missing - available not working missing new lines
    values-lt\store.xml missing - not available - no missing new lines - Lithuanian
    values-nl\store.xml missing - available hardly working one missing new lines
    values-no\store.xml missing and all others except strings - not available - missing new lines - Norwegian
    values-pl\store.xml missing - available hardly working 2 missing new lines
    values-pt-rBR\store.xml missing - available hardly working 3 missing new lines
    values-pt-rPT\store.xml missing - available hardly working 2 missing new lines
    values-ro\store.xml missing - not available hardly 3 missing new lines - Romanian
    values-ru\store.xml missing - available hardly working 3 missing new lines    
    values-sv\store.xml missing - not available 3 missing new lines
    values-th\store.xml missing - not available 3 missing new lines
    values-tr\store.xml missing - available hardly working no missing new lines
               CONFLICT (content): Merge conflict in Habitica/res/values-tr/strings.xml 
                   --> deleted string translations: 
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=670dc4ed5f85612c
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=3f16d2aa5acb48a0
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=222ff91372bcb252
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=86ff87f45d4092
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=4504f810b80896e4
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=a1b50b120ee9d015
                                https://translate.habitica.com/translate/habitica-android/main-strings/tr/?checksum=21ee928fddb02c48
               CONFLICT (content): Merge conflict in Habitica/res/values-tr/strings.sidebar.xml (not sure what's causing it)
    values-uk\store.xml missing - not available 3 missing new lines - Ukr
    values-vi\store.xml missing - not available 2 missing new lines
    values-zh\store.xml missing (simplified) - available hardly working 2 missing new lines
    values-zh-rTW\store.xml missing - available hardly working 2 missing new lines
   
    
    [\S]+[ \n]+[ \cX]
    [\S]+[ \n]+[ \s]
    [ \S]+[ \t]+[ \s]
    [ \S]+[ \cX]+[ \cX]
    \\n
    
    ^[^\s]+[ \s]+$
    
This finds 21 whitespaces in de\strings.xml: ^[^\s]+[ \s]+$
Weblate: warning: squelched 21 whitespace errors (shows German examples)

values\values.xml lists all available languages. <item>en_GB</item> is incorrect, it's en-rGB.
there's no \en file.
language tag

notes: <resources> element https://developer.android.com/guide/topics/resources/providing-resources :
- res/ directory contains all the resources (in subdirectories)
- The resource directory names are important (can navigation folder be in /res...?)
- Caution: Never save resource files directly inside the res/ directory—it causes a compiler error.
- Caution: When appending multiple qualifiers (i.e. folders), you must place them in the same order in which they are listed in table 2 [so, navigation is a problem...?). If the qualifiers are ordered wrong, the resources are ignored. The resource files must be named exactly the same as the default resource files. (drawable comes first then the alternatives...?)
- Caution: When defining an alternative resource, make sure you also define the resource in a default configuration. Otherwise, your app might encounter runtime exceptions when the device changes a configuration. For example, if you add a string to only values-en and not values, your app might encounter a Resource Not Found exception when the user changes the default system language. (this explains why there are no store strings!?)
- The language tag (e.g. ru) can change during the life of your app if the users change their language in the system settings. See Handling Runtime Changes for information about how this can affect your app during runtime.See Localization for a complete guide to localizing your app for other languages. Also see the getLocales() method, which provides the defined list of locales. This list includes the primary locale. https://tools.ietf.org/html/rfc5646
- You can specify multiple qualifiers for a single set of resources, separated by dashes. For example, drawable-en-rUS-land applies to US-English devices in landscape orientation.
- Caution: You should never modify the R.java file by hand—it is generated by the aapt tool when your project is compiled. Any changes are overridden next time you compile.
- always include a values/ directory (in which your strings are saved) without a language and region qualifier. If you instead put all your string files in directories that have a language and region qualifier, then your app will crash when run on a device set to a language that your strings don't support. But, as long as you provide default values/ resources, then your app will run properly (even if the user doesn't understand that language—it's better than crashing).
- once the device configuration is known, it might eliminate alternative resources that can never match. For example, if the configuration language is English ("en"), then any resource directory that has a language qualifier set to something other than English is never included in the pool of resources checked (though a resource directory without the language qualifier is still included).    
- If you want to use UTF-8 with your text files, make sure that your editor/IDE is actually using this character encoding. Some OS like Windows use a different encoding by default.     

-  XML requires that white space to be used to separate attributes and namespace declarations from each other and from the element tagname. Whitespace is also required between the target and data portion of processing instruction and between the text portion of a comment and the closing comment character sequence (-->) if that text ends with a hyphen (-). XML allows whitespace inside element content, attribute values, processing instruction data, and comment text. Whitespace is also allowed between an attribute name and the equal character and between the equal character and the attribute value. The same is true for namespace declarations. Whitespace is allowed between the tag-name of an open or close tag and the ending character sequence for that tag. Whitespace is not allowed between the opening less-than character and the element tagname or between the prefix, colon, and local name of an element or attribute. Nor is it allowed between the start processing instruction character sequence <? and the target. 
- Whitespace used in various places in an XML document: between the tagname, namespace declaration, attribute, and closing greater than character on the top-level element start tag, between each element, in the character content of the seats and colour elements, between the tagname and the />sequence of the petrol element, between the tagname and the closing greater-than character of the end tag for the engine element and the top-level element .Example of incorrect use of whitespace: https://www.w3resource.com/xml/processing-instructions-comments-whitespace.php Whitespace used incorrectly in various places in an XML document: between pre and :Vehicle in the start tag of the top-level element, between xmlns: and pre of the namespace declaration of the top-level element, between the opening less-than character and seats in the start tag of the child element, and between </ and seats in the end tag of the child element.

XML basics: https://www.w3resource.com/xml/attribute.php
- An Element in an XML document starts with an "<" tag and ends with an ">" tag. <name_of_the_element>text</name_of_the_element> In XML documents name of the Elements are user defined. (you can invent some). 
- The text between open and close tags of an XML element is called as content (here:"text").
- <loss /> This is referred to as an empty element shorthand.
- colons are used in the syntax of the namespaces in XML
- Since XML allows designers to chose their own tag names, it is possible that two or more designers may choose the same tag names for some or all of their elements. XML namespace solves this problem. It provides a way to distinguish between XML elements that have the same local name but are, in fact, from different vocabularies. This is done by associating an element with a namespace. A namespace acts as a scope for all elements associated with it. 
  - This XML contains a list of tutorials for client side tools of web development: <tutorial><name>html</name></tutorial>
  - This XML contains a list of tutorials for server side tools of web development: <tutorial><name>php</name></tutorial>
  - If these two XML instances are put together, since both of them carry elements with tagname name, it will create a naming collision.
  - Using namespace, this problem can be solved: <cl:tutorial xmlns:cl="https://www.w3resource.com/client-side-tutorials"><cl:name>html</cl:name></cl:tutorial>
                                                 <srv:tutorial xmlns:srv="https://www.w3resource.com/server-side-tutorials"><srv:name>php</srv:name></srv:tutorial> 
  - Namespaces themselves also have names. A namespace name is a uniform resource identifier (URI). Such a URI serves as a unique string. The namespace name and local name of the element together form a globally unique name known as a qualified name. 
  - In this example, we have shown the use of a qualified name: <srv:tutorial xmlns:srv='urn: https://www.w3resource.com/server-side-tutorial'>
  - Namespace declarations appear inside an element start and end tag and are used to map a namespace prefix. The syntax for a namespace declaration is xmlns: prefix="URI".
  - It is also possible to map a namespace name to no prefix using a default namespace declaration. The syntax for a default namespace declaration is xmlns="URI"
  - In both cases, the URI may appear in single or double quotes.
  - All namespace declarations have a scope - that is, a set of elements to which they may apply. A namespace declaration is in scope for the element on which it is declared and all of that element's descendants. The in-scope mapping of a given prefix to a namespace name can be overridden by providing a new mapping for that prefix on a descendant element.
                                                 
                                                 
                                                 
                                                 
